import unittest
from cgt_seccijr.grabisch import calculate_interaction_ij


class TestGrabisch(unittest.TestCase):

    def test_interaction(self):
        # Arrange
        def v(n_set_ids, coalition_ids, original):
            if len(coalition_ids) <= 0:
                return 0

            estate = 1000

            others_sum = sum([
                debt
                for index, debt in enumerate(original)
                if index not in coalition_ids
            ])

            coalition_estate = max([estate - others_sum, 0])

            return coalition_estate

        original = [50, 50, 50, 50, 50, 200, 200, 200, 400, 400]
        n = len(original)
        n_set = list(range(n))

        expected_grabisch = [
            [0, 1.2896825396825398, 1.2896825396825398, 1.2896825396825398, 1.2896825396825398,
                5.873015873015873, 5.873015873015873, 5.873015873015873, 13.61111111111111, 13.61111111111111],
            [1.2896825396825398, 0, 1.2896825396825398, 1.2896825396825398, 1.2896825396825398,
             5.873015873015873, 5.873015873015873, 5.873015873015873, 13.61111111111111, 13.61111111111111],
            [1.2896825396825398, 1.2896825396825398, 0, 1.2896825396825398, 1.2896825396825398,
             5.873015873015873, 5.873015873015873, 5.873015873015873, 13.61111111111111, 13.61111111111111],
            [1.2896825396825398, 1.2896825396825398, 1.2896825396825398, 0, 1.2896825396825398,
             5.873015873015873, 5.873015873015873, 5.873015873015873, 13.61111111111111, 13.61111111111111],
            [1.2896825396825398, 1.2896825396825398, 1.2896825396825398, 1.2896825396825398, 0,
             5.873015873015873, 5.873015873015873, 5.873015873015873, 13.61111111111111, 13.61111111111111],
            [5.873015873015873, 5.873015873015873, 5.873015873015873, 5.873015873015873, 5.873015873015873,
             0, 27.48015873015873, 27.48015873015873, 57.83730158730159, 57.83730158730159],
            [5.873015873015873, 5.873015873015873, 5.873015873015873, 5.873015873015873, 5.873015873015873,
             27.48015873015873, 0, 27.48015873015873, 57.83730158730159, 57.83730158730159],
            [5.873015873015873, 5.873015873015873, 5.873015873015873, 5.873015873015873, 5.873015873015873,
             27.48015873015873, 27.48015873015873, 0, 57.83730158730159, 57.83730158730159],
            [13.61111111111111, 13.61111111111111, 13.61111111111111, 13.61111111111111, 13.61111111111111,
             57.83730158730159, 57.83730158730159, 57.83730158730159, 0, 158.43253968253967],
            [13.61111111111111, 13.61111111111111, 13.61111111111111, 13.61111111111111, 13.61111111111111,
                57.83730158730159, 57.83730158730159, 57.83730158730159, 158.43253968253967, 0]
        ]

        # Act
        for i in range(n):
            for j in range(n):
                if i != j:
                    output = calculate_interaction_ij(i, j, n_set, v, original)

                    # Assert
                    expected_result = expected_grabisch[i][j]
                    expected_output = (i, j, expected_result)
                    self.assertEqual(output, expected_output)
